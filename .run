#!/bin/bash
# ".run" is an utility script that is called by main appctl
# to run certain actions inside Misago's docker container.

# Text styles
RED='\033[0;31m'
NORMAL=$(tput sgr0)

# Check if we are inside Misago's docker container
if [[ ! $IN_MISAGO_DOCKER = 1 ]]; then
    echo "This command can only be ran inside the running Misago docker container."
    echo
    exit 1
fi

# Utility functions used by action commands
error() {
    echo -e "${RED}Error:${NORMAL} $1"
    echo
    exit 1
}


wait_for_db() {
    export PGPASSWORD=$POSTGRES_PASSWORD
    RETRIES=10
    until psql -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_USER -c "select 1" > /dev/null 2>&1 || [ $RETRIES -eq 0 ]; do
        ((RETRIES--))
        sleep 2
    done
}

# Handle invalid argument
invalid_argument() {
    echo -e "Invalid argument: ${RED}$1${NORMAL}"
    echo
    exit 1
}

# Initialize default database
initialize_default_database() {
    # wait for DB to be ready
    wait_for_db
    # migrate default database
    echo "Migrating database"
    python manage.py migrate
    # ask user to create first admin account
    echo "Creating first superuser account"
    python manage.py createsuperuser
}

# Run psql connected to database
run_psql() {
    wait_for_db
    PGPASSWORD=$POSTGRES_PASSWORD
    psql --username $POSTGRES_USER --host $POSTGRES_HOST $POSTGRES_DB
}

# Backup database and media to archive
create_new_backup() {
    # create backups/year/month path if doesnt exist, and cd to it
    backups_dir="/misago/backups/$(date +%Y)/$(date +%m)"
    mkdir -p $backups_dir
    cd $backups_dir
    # create backup dir
    backup_dir="misago-$(date +%Y%m%d%H%M%S)"
    mkdir "./$backup_dir"
    # backup database
    wait_for_db
    PGPASSWORD=$POSTGRES_PASSWORD
    pg_dump -U $POSTGRES_USER -h $POSTGRES_HOST $POSTGRES_DB -Oxc > "./$backup_dir/database.sql"
    # backup media
    cp -r /misago/media "$backup_dir/media"
    # archive backup dir
    backup_archive="misago-$(date +%Y%m%d%H%M%S).tar.gz"
    GZIP=-9
    tar -zcf $backup_archive "./$backup_dir"
    # delete backup dir as its no longer required
    rm -rf $backup_dir
    echo "New backup has been created at backups/$(date +%Y)/$(date +%m)/$backup_archive"
    echo
}

# Restore database and media from backup archive
restore_from_backup() {
    if [[ ! $1 ]]; then
        error "You need to specify backup archive to restore from."
    fi
    # Check if backup archive exists
    backups_dir="/misago/backups/"
    if [ ! -e "$backups_dir/$1" ]; then
        error "Path backups/$1 doesn't exist."
    fi
    # Unarchive specified file to tmp directory
    echo "Restoring from $1..."
    tmp_dir="/misago/tmp-$(date +%Y%m%d%H%M%S)"
    mkdir $tmp_dir
    tar -xzf "$backups_dir/$1" -C $tmp_dir
    # Find media and database backups in unarchived directory
    database_sql=false
    media_dir=false
    for backup_dir in "$tmp_dir/*"; do
        if [ -d $backup_dir ]; then
            database_sql="$(echo $backup_dir/database.sql)"
            media_dir="$(echo $backup_dir/media)"
        fi
    done
    if [ ! -e $database_sql ]; then
        rm -rf $tmp_dir
        error "Specified archive is missing database backup."
    fi
    if [ ! -d $media_dir ]; then
        rm -rf $tmp_dir
        error "Specified archive is missing media backup."
    fi
    # Restore from archive
    wait_for_db
    PGPASSWORD=$POSTGRES_PASSWORD
    (psql --username $POSTGRES_USER --host $POSTGRES_HOST $POSTGRES_DB < $database_sql) > /dev/null
    rm -rf /misago/media/*
    mv "$media_dir"/* /misago/media/
    # Cleanup...
    rm -rf $tmp_dir
    ls
    echo "Restore completed! Remember to run \"./appctl rebuild\" to rebuild and restart your site!"
    echo
}

# Command dispatcher
if [[ $1 ]]; then
    if [[ $1 = "initialize_default_database" ]]; then
        initialize_default_database
    elif [[ $1 = "wait_for_db" ]]; then
        wait_for_db
    elif [[ $1 = "psql" ]]; then
        run_psql
    elif [[ $1 = "backup" ]]; then
        create_new_backup
    elif [[ $1 = "restore" ]]; then
        restore_from_backup $2
    else
        invalid_argument $1
    fi
fi